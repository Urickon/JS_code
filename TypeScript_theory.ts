====================================================================================================
<-----------TYPESCRIPT()------------>
====================================================================================================
ВВЕДЕНИЕ В TypeScript

Плюсы TS
/*Может отлавливать ошибки на этапе разработки, до сборки приложения.
Статическая типизация делает код более понятным.
Позволяет писать более сложные и крупные JS-приложения, интеграция с IDE
Проще работать в команде
Богатая документация*/

Минусы TS
/*Это дополнительная прослойка, которую нужно внедрять на этапе разработки.*/

/*Файлы расширения ts.
Компиялтор может переводить их в js-файлы при запуске.*/

Типы данных
/*Присовив один раз, потом уже нельзя менять.*/

const isFetching: boolean = true

/*
variable: boolean,
variable: number,
variable: string,
variable: null,
variable: undefined.

variable: number[] - массив из чисел
variable: Array<number> - другая запись того же самого

Tuple - массив из рзных типов данных, записывается как
variable: [string, number]

Any - означает, что переменная будет иметь динамическую типизацию, то есть ей можно 
присваивать любой тип данных.
variable: any
*/

Type
/*Ключевое слово Type нужно для создания собственных типов.
Используется либо для создания одного типа на основе базового(1),
как правило, просто для удобства разработки, 
либо для создания производных типов для таких вещей, как ID, 
который может быть как числом, так и строкой(2)*/

type login = string
const newLogin: login = 'admin' //(1)

type ID = string | number
const newID: ID = 1234
const newID: ID = '1234' //(2)

//Если допустимы неопределенность или null, то

type ID2 = string | number | null | undefined
const newID2: ID2 = null

====================================================================================================

ФУНКЦИИ

/*Не совсем обычная запись. В аргументах указываем их тип данных.
При вызове функции в TS в нее нужно передавать столько аргументов, сколько она содержит.
Чтобы сделать некоторые аргументы необязательными, их помечают знаком ?*/

function sayMyName (name?: string): void { //function declaration, name - необязательный аргумент
	console.log(name)
}

let add = function (a: number, b: number) : number { //function expression
    return a + b;
}

add(1, 2)

//Тип функции void означает, что она ничего не возварщает.
/*Never - тип функции, которая возвращает ошибку или выполняется бесконечно. Например:*/

function throwError (error: string): never {
	throw new Error(error)
}

function infinite (): never {
	while (true){ //бесконечный цикл

	}
}

//Значения параметров по умолчанию задаются следюущим образом:
function getName(firstName: string, lastName: string="Иванов") {
    return firstName + " " + lastName;
}

//Неограниченный набор параметров передается в функцию следующим образом:
function addNumbers(firstNum: number, ...numberArr: number[]): number {
	//some code
}

let result = addNumbers(1, 4, 77, 55, 12) //все аргументы после первого попадут в числовой массив

/*Перегрузка функций в TS.
Так как каждая конкретная функция работает с конкретным типом данных, можно объединять
их под одинаковым именем. Такая функция sum будет складывать строки и числа
в зависимости от того, какие данные получит.*/

function add(x: string, y: string): string;
function add(x: number, y: number): number;
function add(x: any, y: any): any {
    return x + y;
}

//В более новых версиях используется тип объединения

function myMethod(a: string | number) { //a либо строка либо число.
    //some code
}

====================================================================================================

ИНТЕРФЕЙСЫ
















































